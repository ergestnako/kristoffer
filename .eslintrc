{
    "env": {
        "browser": true,
        "node": true
    },
     "rules": {
        "block-scoped-var": 2, // - treat var statements as if they were block scoped (off by default)
        // maybe?
        "brace-style": [2, "1tbs", { "allowSingleLine": false }], // - enforce one true brace style (off by default)
        "camelcase": 1, // - require camel case names
        "comma-spacing": [2, {before: false, after: true}], // - enforce spacing before and after comma
        "comma-style": [2, "last"], // - enforce one true comma style (off by default)
        "complexity": 0, // - specify the maximum cyclomatic complexity allowed in a program (off by default)
        "consistent-return": 2, // - require return statements to either always or never specify values
        "consistent-this": [2, "self"], // - enforces consistent naming when capturing the current execution context (off by default)
        //maybe?
        "curly": 2, // - specify curly brace conventions for all control statements
        "default-case": 2, // - require default case in switch statements (off by default)
        "dot-notation": 0, // - encourages use of dot notation whenever possible
        "eol-last": 2, // - enforce newline at the end of file, with no multiple empty lines
        "eqeqeq": 2, // - require the use of === and !==
        "func-names": 0, // - require function expressions to have a name (off by default)
        // maybe?
        "func-style": [2, "declaration"], // - enforces use of function declarations or expressions (off by default)
        "generator-star": 0, // - enforce the position of the * in generator functions (off by default)
        "global-strict": 0, // - require or disallow the "use strict" pragma in the global scope (off by default in the node environment)
        //maybe?
        "guard-for-in": 2, // - make sure for-in loops have an if statement (off by default)
        "handle-callback-err": 0, // - enforces error handling in callbacks (off by default) (on by default in the node environment)
        "key-spacing": [2, { "beforeColon": false, "afterColon": true }], // - enforces spacing between keys and values in object literal properties
        "max-depth": 0, // - specify the maximum depth that blocks can be nested (off by default)
        "max-len": 0, // - specify the maximum length of a line in your program (off by default)
        "max-nested-callbacks": 0, // - specify the maximum depth callbacks can be nested (off by default)
        "max-params": 0, // - limits the number of parameters that can be used in the function declaration. (off by default)
        "max-statements": 0, // - specify the maximum number of statement allowed in a function (off by default)
        "new-cap": 2, // - require a capital letter for constructors
        "new-parens": 2, // - disallow the omission of parentheses when invoking a constructor with no arguments
        "no-alert": 2, // - disallow the use of alert, confirm, and prompt
        "no-array-constructor": 2, // - disallow use of the Array constructor
        "no-bitwise": 2, // - disallow use of bitwise operators (off by default)
        "no-caller": 2, // - disallow use of arguments.caller or arguments.callee
        "no-catch-shadow": 2, // - disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-comma-dangle": 2, // - disallow trailing commas in object literals
        "no-cond-assign": 2, // - disallow assignment in conditional expressions
        "no-console": 2, // - disallow use of console (off by default in the node environment)
        "no-constant-condition": 2, // - disallow use of constant expressions in conditions
        "no-control-regex": 2, // - disallow control characters in regular expressions
        "no-debugger": 2, // - disallow use of debugger
        "no-delete-var": 2, // - disallow deletion of variables
        "no-div-regex": 2, // - disallow division operators explicitly at beginning of regular expression (off by default)
        "no-dupe-keys": 2, // - disallow duplicate keys when creating object literals
        "no-else-return": 0, // - disallow else after a return in an if (off by default)
        "no-empty": 2, // - disallow empty statements
        "no-empty-class": 2, // - disallow the use of empty character classes in regular expressions
        "no-empty-label": 2, // - disallow use of labels for anything other then loops and switches
        "no-eq-null": 2, // - disallow comparisons to null without a type-checking operator (off by default)
        "no-eval": 2, // - disallow use of eval()
        "no-ex-assign": 2, // - disallow assigning to the exception in a catch block
        "no-extend-native": 2, // - disallow adding to native types
        "no-extra-bind": 2, // - disallow unnecessary function binding
        "no-extra-boolean-cast": 2, // - disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 0, // - disallow unnecessary parentheses (off by default)
        "no-extra-semi": 2, // - disallow unnecessary semicolons
        "no-extra-strict": 2, // - disallow unnecessary use of "use strict"; when already in strict mode
        "no-fallthrough": 2, // - disallow fallthrough of case statements
        "no-floating-decimal": 2, // - disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-func-assign": 2, // - disallow overwriting functions written as function declarations
        "no-implied-eval": 2, // - disallow use of eval()-like methods
        "no-inline-comments": 0, // - disallow comments inline after code (off by default)
        "no-inner-declarations": 2, // - disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 2, // - disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 2, // - disallow irregular whitespace outside of strings and comments
        "no-iterator": 2, // - disallow usage of __iterator__ property
        "no-label-var": 2, // - disallow labels that share a name with a variable
        "no-labels": 2, // - disallow use of labeled statements
        "no-lone-blocks": 2, // - disallow unnecessary nested blocks
        "no-lonely-if": 2, // - disallow if as the only statement in an else block (off by default)
        "no-loop-func": 2, // - disallow creation of functions within loops
        "no-mixed-requires": 0, // - disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
        "no-mixed-spaces-and-tabs": 2, // - disallow mixed spaces and tabs for indentation
        "no-multi-spaces": 2, // - disallow use of multiple spaces
        "no-multi-str": 2, // - disallow use of multiline strings
        "no-multiple-empty-lines": [1, {max: 2}], // - disallow multiple empty lines (off by default)
        "no-native-reassign": 2, // - disallow reassignments of native objects
        "no-negated-in-lhs": 2, // - disallow negation of the left operand of an in expression
        "no-nested-ternary": 2, // - disallow nested ternary expressions (off by default)
        "no-new": 2, // - disallow use of new operator when not part of the assignment or comparison
        "no-new-func": 2, // - disallow use of new operator for Function object
        "no-new-object": 2, // - disallow use of the Object constructor
        "no-new-require": 0, // - disallow use of new operator with the require function (off by default) (on by default in the node environment)
        "no-new-wrappers": 2, // - disallows creating new instances of String,Number, and Boolean
        "no-obj-calls": 2, // - disallow the use of object properties of the global object (Math and JSON) as functions
        "no-octal": 2, // - disallow use of octal literals
        "no-octal-escape": 2, // - disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-path-concat": 0, // - disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
        "no-plusplus": 0, // - disallow use of unary operators, ++ and -- (off by default)
        "no-process-env": 0, // - disallow use of process.env (off by default)
        "no-process-exit": 0, // - disallow process.exit() (on by default in the node environment)
        "no-proto": 2, // - disallow usage of __proto__ property
        "no-redeclare": 2, // - disallow declaring the same variable more then once
        "no-regex-spaces": 2, // - disallow multiple spaces in a regular expression literal
        "no-reserved-keys": 2, // - disallow reserved words being used as object literal keys (off by default)
        "no-restricted-modules": 0, // - restrict usage of specified node modules (off by default)
        "no-return-assign": 2, // - disallow use of assignment in return statement
        "no-script-url": 2, // - disallow use of javascript: urls.
        "no-self-compare": 2, // - disallow comparisons where both sides are exactly the same (off by default)
        "no-sequences": 2, // - disallow use of comma operator
        // maybe?
        "no-shadow": 2, // - disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 2, // - disallow shadowing of names such as arguments
        "no-space-before-semi": 2, // - disallow space before semicolon
        "no-spaced-func": 2, // - disallow space between function identifier and application
        "no-sparse-arrays": 2, // - disallow sparse arrays
        "no-sync": 0, // - disallow use of synchronous methods (off by default)
        "no-ternary": 0, // - disallow the use of ternary operators (off by default)
        "no-trailing-spaces": 2, // - disallow trailing whitespace at the end of lines
        "no-undef": 2, // - disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef-init": 2, // - disallow use of undefined when initializing variables
        "no-undefined": 2, // - disallow use of undefined variable (off by default)
        "no-underscore-dangle": 0, // - disallow dangling underscores in identifiers
        "no-unreachable": 2, // - disallow unreachable statements after a return, throw, continue, or break statement
        "no-unused-expressions": 2, // - disallow usage of expressions in statement position
        "no-unused-vars": 2, // - disallow declaration of variables that are not used in the code
        "no-use-before-define": 2, // - disallow use of variables before they are defined
        "no-var": 0, // - require let or const instead of var (off by default)
        "no-void": 2, // - disallow use of void operator (off by default)
        "no-warning-comments": 0, // - disallow usage of configurable warning terms in comments - e.g. TODO or FIXME (off by default)
        "no-with": 2, // - disallow use of the with statement
        "no-wrap-func": 2, // - disallow wrapping of non-IIFE statements in parens
        "one-var": 0, // - allow just one var statement per function (off by default)
        "operator-assignment": 0, // - require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "padded-blocks": 0, // - enforce padding within blocks (off by default)
        "quote-props": "as-needed", // - require quotes around object literal property names (off by default)
        "quotes": [2, "single", "avoid-escape"], // - specify whether double or single quotes should be used
        "radix": 2, // - require use of the second argument for parseInt() (off by default)
        "semi": [2, "always"], // - require or disallow use of semicolons instead of ASI
        "sort-vars": 0, // - sort variables within the same declaration block (off by default)
        "space-after-function-name": [2, "never"], // - require a space after function names (off by default)
        "space-after-keywords": [2, "always"], // - require a space after certain keywords (off by default)
        "space-before-blocks": [2, "always"], // - require or disallow space before blocks (off by default)
        "space-in-brackets": 0, // - require or disallow spaces inside brackets (off by default)
        "space-in-parens": [2, "never"], // - require or disallow spaces inside parentheses (off by default)
        "space-infix-ops": 2, // - require spaces around operators
        "space-return-throw-case": 2, // - require a space after return, throw, and case
        "space-unary-ops": [2, { "words": true, "nonwords": false }], // - Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "spaced-line-comment": [2, "always"], // - require or disallow a space immediately following the // in a line comment (off by default)
        "strict": 2, // - require that all functions are run in strict mode
        "use-isnan": 2, // - disallow comparisons with the value NaN
        "valid-jsdoc": 0, // - Ensure JSDoc comments are valid (off by default)
        "valid-typeof": 2, // - Ensure that the results of typeof are compared against a valid string
        "vars-on-top": 0, // - requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": [2, "inside"], // - require immediate function invocation to be wrapped in parentheses (off by default)
        "wrap-regex": 0, // - require regex literals to be wrapped in parentheses (off by default)
        "yoda": 0, // - require or disallow Yoda conditions
    }
}
